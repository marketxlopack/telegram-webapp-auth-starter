import React, { useEffect, useState } from 'react';

declare global {
  interface Window {
    Telegram?: any;
  }
}

type TgUser = {
  id: number;
  first_name?: string;
  last_name?: string;
  username?: string;
  photo_url?: string;
  language_code?: string;
};

export default function Home() {
  const [state, setState] = useState<{
    phase: 'idle' | 'loading' | 'ok' | 'error';
    msg?: string;
    user?: TgUser;
    inTelegram?: boolean;
  }>({ phase: 'idle' });

  useEffect(() => {
    const tg = window.Telegram?.WebApp;
    const inTelegram = Boolean(tg);

    if (!inTelegram) {
      // üöÄ –í–ù–ï Telegram ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–≥–æ —é–∑–µ—Ä–∞
      setState({ phase: 'ok', user: undefined, inTelegram: false });
      return;
    }

    tg.ready();
    tg.expand();

    async function doAuth() {
      setState({ phase: 'loading', inTelegram: true });
      try {
        const initData = tg.initData; // raw string
        const resp = await fetch('/api/auth/verify-init-data', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData }),
        });
        const data = await resp.json();
        if (!data.ok) throw new Error(data.error || 'Auth failed');
        setState({ phase: 'ok', user: data.user || undefined, inTelegram: true });
        tg.MainButton.setText('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å');
        tg.MainButton.show();
      } catch (e: any) {
        setState({ phase: 'error', msg: e?.message || 'Auth failed', inTelegram: true });
      }
    }

    doAuth();
  }, []);

  return (
    <main style={{ fontFamily: 'system-ui, sans-serif', padding: 24 }}>
      <h1>Telegram WebApp Auth</h1>

      {state.inTelegram === false && (
        <p style={{ color: 'gray' }}>
          –ó–∞–ø—É—â–µ–Ω–æ <b>–≤ –±—Ä–∞—É–∑–µ—Ä–µ</b>, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏.
        </p>
      )}

      {state.phase === 'idle' && <p>–ì–æ—Ç–æ–≤–ª—é—Å—å‚Ä¶</p>}
      {state.phase === 'loading' && <p>–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å—å Telegram‚Ä¶</p>}
      {state.phase === 'ok' && (
        <>
          <p>
            –£—Å–ø–µ—à–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:{' '}
            {state.user
              ? state.user.username
                ? `@${state.user.username}`
                : state.user.first_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
              : '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω (–≤–Ω–µ Telegram)'}
          </p>
          <pre
            style={{
              whiteSpace: 'pre-wrap',
              wordBreak: 'break-word',
              background: '#f6f6f6',
              padding: 12,
              borderRadius: 8,
            }}
          >
            {JSON.stringify(
              state.user ?? { note: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram' },
              null,
              2
            )}
          </pre>
        </>
      )}
      {state.phase === 'error' && <p style={{ color: 'crimson' }}>–û—à–∏–±–∫–∞: {state.msg}</p>}
    </main>
  );
}
